use crate::{api::ApiClient, Result};
use reqwest;
use std::path::Path;
use uuid::Uuid;

pub struct PresignedUploader {
    client: ApiClient,
}

impl PresignedUploader {
    pub fn new(client: ApiClient) -> Self {
        Self { client }
    }

    pub async fn upload_artifact(
        &self,
        artifact_path: &Path,
        app_id: Uuid,
        version: &str,
    ) -> Result<(String, String)> {
        // Step 1: Get presigned URL from backend
        let filename = artifact_path
            .file_name()
            .and_then(|name| name.to_str())
            .unwrap_or("artifact.tar.gz");

        println!("ðŸ”„ Requesting upload URL from backend...");

        let presigned_response = self
            .client
            .get_presigned_upload_url(app_id, version, filename)
            .await?;

        println!("âœ… Received upload URL");
        println!("   Expires in: {} seconds", presigned_response.expires_in);

        // Step 2: Upload file directly to S3 using presigned URL
        println!("ðŸ”„ Uploading to S3...");

        let file_content = std::fs::read(artifact_path)
            .map_err(|e| anyhow::anyhow!("Failed to read artifact file: {}", e))?;

        let client = reqwest::Client::new();
        let response = client
            .put(&presigned_response.upload_url)
            .header("Content-Type", "application/gzip")
            .body(file_content)
            .send()
            .await
            .map_err(|e| anyhow::anyhow!("Failed to upload to S3: {}", e))?;

        if !response.status().is_success() {
            let status = response.status();
            let error_text = response.text().await.unwrap_or_default();
            return Err(
                anyhow::anyhow!("S3 upload failed with status {}: {}", status, error_text).into(),
            );
        }

        println!("âœ… Upload successful!");

        // Step 3: Generate download presigned URL
        // For now, we'll use a placeholder URL - this should be generated by backend
        let download_url = format!("Download URL for: {}", presigned_response.s3_key);

        Ok((presigned_response.s3_key, download_url))
    }
}
